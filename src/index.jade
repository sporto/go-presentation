!!! 5
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title Go

		//- Check out 'src/bower_components/prism/' for available themes
		link(rel='stylesheet', type='text/css', href='bower_components/prism/prism-tomorrow.css')

		link(rel='stylesheet', type='text/css', href='styles/main.css')

	body

		article

			section
				h1 Go
				h2 A great language for modern web applications
				p @sebasporto

			section
				h2 Why Go use for building web application?

			section
				h3 Comparing it to languages I 
					b use 
					| and 
					b love
				hr
				h2 Ruby
				h2 JavaScript


			section
				h2 To start with
				hr
				ul.left
					li + Lightweight
					li + Relatively easy to learn
					li + Familiar


			section#fast-intro
				figure
				h2 It is fast

			section
				h2 Bubble sort benchmark
				code.language-ruby
					pre.
						# ruby
						bubble.call([2, 10, 1, 9, 5, 6, 8, 3, 7, 4])
				hr
				code.language-javascript
					pre.
						// JS
						bubble([2, 10, 1, 9, 5, 6, 8, 3, 7, 4]);
				hr
				code.language-clike
					pre.
						// Go
						arr := []int{2, 10, 1, 9, 5, 6, 8, 3, 7, 4}
						bubble(arr)
				hr
				p <a href="https://gist.github.com/sporto/6432229" target="_blank">Code here</a>

			section#speed-conclusion
				h2 It is fast! 
				hr
				img(src="images/speed.png")
				hr
				hr
				h3 190x faster than Ruby




			section#concurrency-intro
				h2 Concurrency as core feature
				figure

			section#parallel-intro
				h2 Concurrency - Parallel requests
				hr
				figure

			section
				img(src='images/parallel.png')

			section#ruby-parallel
				div
					h3 Concurrency - Parallel requests
					h2 Ruby
					figure
					hr
					ul
						li Mutex and Threads :(
						li EventMachine :(

			section
				h3 Concurrency - Parallel requests
				h2 Node.js
				hr
				code.language-javascript
					pre.
						var defX = Q.defer();
						var defY = Q.defer();

						var oneAndTwo = Q
							.all([defX.promise, defY.promise])
							.then(processConcat);

						requestValue('/x', defX);
						requestValue('/y', defY);

			section
				h3 Concurrency - Parallel requests
				h2 Go
				hr
				code.language-clike
					pre.
						var cx chan string = make(chan string)
						var cy chan string = make(chan string)

						go requestValue("/x", cx)
						go requestValue("/y", cy)

						x := <-cx
						y := <-cy

						processConcat(x, y)


			section
				h2 Static typing - the right way
				hr
				ul.left
					li + Less tests
					li + Compiler can go crazy with optimisations
					li + No ceremony
					li + Still flexible

			section
				h2 Rich standard library
				hr
				ul.left
					li + Http
					li + Templating
					li + JSON

			section
				h2 A lot more
				hr
				ul.left
					li + Ultra Fast Compilation
					li + Simple but flexible object system
					li + Single binary
					li + Functions as first class
					li + Build in dependency management
					li + Standard formating of source code


			section(data-bespoke-state='emphatic')
				img(src='images/gopherbiplane.png')
				hr
				h2 It is great alternative
				h3 Try it!

			section
				h2 Thanks
				p @sebasporto

		script(src='bower_components/bespoke.js/dist/bespoke.min.js')
		script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
		script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
		script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
		script(src='bower_components/prism/prism.js')
		script(src='scripts/prism.ruby.js')
		script(src='bower_components/prism/components/prism-clike.js')
		script(src='bower_components/prism/components/prism-bash.js')
		script(src='scripts/main.js')
