!!! 5
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title Go

		//- Check out 'src/bower_components/prism/' for available themes
		link(rel='stylesheet', type='text/css', href='bower_components/prism/prism-tomorrow.css')

		link(rel='stylesheet', type='text/css', href='styles/main.css')

	body

		article

			section
				h1 Go
				h2 A great language for modern web applications
				p @sebasporto

			section
				h2 It is fast

			section
				h3 Speed
				h2 Ruby
				hr
				code.language-ruby
					pre.
						bubble = ->(list) do
							return list if list.size <= 1 # already sorted
							swapped = true
							while swapped do
								swapped = false
								0.upto(list.size-2) do |i|
									if list[i] > list[i+1]
										list[i], list[i+1] = list[i+1], list[i] # swap values
										swapped = true
									end
								end
							end

							list
						end

						bubble.call([2, 10, 1, 9, 5, 6, 8, 3, 7, 4])


			section
				h3 Speed
				h2 JS
				hr
				code.language-javascript
					pre.
						function bubble(a) {
							var swapped;
							do {
								swapped = false;
								for(var i = 0; i < a.length - 1; i++) {
									if(a[i] > a[i + 1]) {
										var temp = a[i];
										a[i] = a[i + 1];
										a[i + 1] = temp;
										swapped = true;
									}
								}
							} while (swapped);
						}

						bubble([2, 10, 1, 9, 5, 6, 8, 3, 7, 4]);

			section
				h3 Speed
				h2 Go
				hr
				code.language-clike
					pre.
						func bubble(s []int) {
							for i := len(s) - 2; i >= 0; i-- {
								for j := 0; j <= i; j++ {
									if s[j] > s[j+1] {
										s[j], s[j+1] = s[j+1], s[j]
									}
								}
							}
						}

						arr := []int{2, 10, 1, 9, 5, 6, 8, 3, 7, 4}
						bubble(arr)

			section#speed-conclusion
				h2 Speed 
				hr
				table.table
					thead
						tr
							th
							th Ns per op
					tbody
						tr
							th Ruby
							td 44,000
						tr
							th Go
							td 357

				hr
				h3 120x faster
				hr
				figure

			section
				h2 Concurrency - Parallel requests
				hr
				img(src='images/parallel.png')

			section#ruby-parallel
				div
					h3 Concurrency - Parallel requests
					h2 Ruby
					hr
					figure
					hr
					ul
						li Mutex and Threads :(
						li EventMachine :(

			section
				h3 Concurrency - Parallel requests
				h2 Node.js
				hr
				code.language-javascript
					pre.
						var defX = Q.defer();
						var defY = Q.defer();

						var oneAndTwo = Q
							.all([defX.promise, defY.promise])
							.then(processConcat);

						requestValue('/x', defX);
						requestValue('/y', defY);

			section
				h3 Concurrency - Parallel requests
				h2 Go
				hr
				code.language-clike
					pre.
						var cx chan string = make(chan string)
						var cy chan string = make(chan string)

						go requestValue("/x", cx)
						go requestValue("/y", cy)

						x := <-cx
						y := <-cy

						processConcat(x, y)

			section
				h2 Concurrency - Memory Usage
				img(src='images/memory.png')

			section
				h3 Concurrency - Memory Usage
				h2 Node.js
				hr
				code.language-javascript
					pre.
						var http = require('http')
						var Buffer = require('buffer').Buffer;
						var n = 1024*1024;
						var b = new Buffer(n);
						for (var i = 0; i < n; i++) b[i] = 100;

						http.createServer(function (req, res) {
							res.writeHead(200);
							res.end(b);
						}).listen(8100);

			section#memory-node
				h3 Concurrency - Memory Usage
				h2 Node.js
				hr
				code.language-bash
					pre.
						# Run benchmark
						ab -n 10000 -c 100 http://127.0.0.1:8100/

						# Very likely to get this
						FATAL ERROR: (...) process out of memory
				hr
				figure

			section
				h3 Concurrency - Memory Usage
				h2 Go
				hr
				code.language-clike
					pre.
						package main

						import "net/http"
						
						func main() {
							bytes := make([]byte, 1024*1024)
							for i := 0; i < len(bytes); i++ {
								bytes[i] = 100
							}

							http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
								w.Write(bytes)
							})
							http.ListenAndServe(":8100", nil)
						}

			section#memory-go
				h3 Concurrency - Memory Usage
				h2 Go
				hr
				code.language-bash
					pre.
						ab -n 10000 -c 100 http://127.0.0.1:8100/

						...
						Time taken for tests:   20.689 seconds
						Complete requests:      10000
						...

						# IT WORKS!
				hr
				figure

			section(data-bespoke-state='emphatic')
				h2 It is awesome
				h3 Try it!

			section(data-bespoke-state='emphatic')
				h2 But there is a lot more ...

			section
				h2 Simple
				ul
					li Small Core
					li Easy to learn
					li Flexible

			section
				h2 Static typing
				h3 Yes this is useful!

			section
				h2 Static typing
				h3 Developer efficiency - less tests
				code.language-ruby
					pre.
						# ruby
						it "doesn't blow up when I pass something unexpected" do
							add(1, "two")
						end

			section
				h2 Static typing 
				h3 Without the ceremony
				code.language-clike
					pre.
						# Java, C#
						Circle c = new Circle(15);

						# go
						c := Circle{R: 15}

			section
				h2 Static typing
				hr
				ul
					li Faster - Compiler can go crazy with optimisations
					li Easier to refactor

			section
				h2 Ultra Fast Compilation

			section
				h2 Multiple return values
				h3 A sensible way not to mix return values and errors
				code.language-ruby
					pre.
						# ruby
						foo.add(1, "two") # should this return false? throw?

						# go
						res, err := add(x, y)

			section
				h2 Imports
				ul
					li Embeded in the source code
					li No need for gemfile, package.json, etc
				hr
				code.language-clike
					pre.
						import(
							'github.com/sporto/something'
						)

			section
				h2 Object system
				hr
				ul
					li It is all composition
					li Inferred

			section
				h2 Modern Standard Library
				ul
					li http
					li Crypto

			section
				h2 Thanks

		script(src='bower_components/bespoke.js/dist/bespoke.min.js')
		script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
		script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
		script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
		script(src='bower_components/prism/prism.js')
		script(src='scripts/prism.ruby.js')
		script(src='bower_components/prism/components/prism-clike.js')
		script(src='bower_components/prism/components/prism-bash.js')
		script(src='scripts/main.js')
