!!! 5
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title Go

		//- Check out 'src/bower_components/prism/' for available themes
		link(rel='stylesheet', type='text/css', href='bower_components/prism/prism-tomorrow.css')

		link(rel='stylesheet', type='text/css', href='styles/main.css')

	body

		article

			section
				h1 Go
				h2 A great language for modern web applications
				p @sebasporto

			section
				h2 Why Go use for building web application?

			section#fast-intro
				figure
				h2 It is fast

			section
				h2 Bubble sort benchmark
				code.language-ruby
					pre.
						# ruby
						bubble.call([2, 10, 1, 9, 5, 6, 8, 3, 7, 4])
				hr

				code.language-javascript
					pre.
						// JS
						bubble([2, 10, 1, 9, 5, 6, 8, 3, 7, 4]);
				hr

				code.language-clike
					pre.
						// Go
						arr := []int{2, 10, 1, 9, 5, 6, 8, 3, 7, 4}
						bubble(arr)

			section#speed-conclusion
				h2 It is fast! 
				hr
				img(src="images/speed.png")
				hr
				hr
				h3 190x faster than Ruby

			section#concurrency-intro
				h2 Concurrency
				figure

			section#parallel-wallpaper
				figure

			section
				h2 Concurrency - Parallel requests
				hr
				img(src='images/parallel.png')

			section#ruby-parallel
				div
					h3 Concurrency - Parallel requests
					h2 Ruby
					figure
					hr
					ul
						li Mutex and Threads :(
						li EventMachine :(

			section
				h3 Concurrency - Parallel requests
				h2 Node.js
				hr
				code.language-javascript
					pre.
						var defX = Q.defer();
						var defY = Q.defer();

						var oneAndTwo = Q
							.all([defX.promise, defY.promise])
							.then(processConcat);

						requestValue('/x', defX);
						requestValue('/y', defY);

			section
				h3 Concurrency - Parallel requests
				h2 Go
				hr
				code.language-clike
					pre.
						var cx chan string = make(chan string)
						var cy chan string = make(chan string)

						go requestValue("/x", cx)
						go requestValue("/y", cy)

						x := <-cx
						y := <-cy

						processConcat(x, y)

			section#concurrency-memory
				h1 &nbsp;
				hr
				figure

			section
				h2 Concurrency - Memory Usage
				img(src='images/memory.png')

			section
				h3 Concurrency - Memory Usage
				h2 Node.js
				hr
				code.language-javascript
					pre.
						var http = require('http')
						var Buffer = require('buffer').Buffer;
						var n = 1024*1024;
						var b = new Buffer(n);
						for (var i = 0; i < n; i++) b[i] = 100;

						http.createServer(function (req, res) {
							res.writeHead(200);
							res.end(b);
						}).listen(8100);

			section#memory-node-result
				h3 Concurrency - Memory Usage
				h2 Node.js
				hr
				code.language-bash
					pre.
						# Run benchmark
						ab -n 10000 -c 100 http://127.0.0.1:8100/

						# Very likely to get this
						FATAL ERROR: (...) process out of memory
				figure

			section
				h3 Concurrency - Memory Usage
				h2 Go
				hr
				code.language-clike
					pre.
						package main

						import "net/http"
						
						func main() {
							bytes := make([]byte, 1024*1024)
							for i := 0; i < len(bytes); i++ {
								bytes[i] = 100
							}

							http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
								w.Write(bytes)
							})
							http.ListenAndServe(":8100", nil)
						}

			section#memory-go-result
				h3 Concurrency - Memory Usage
				h2 Go
				hr
				code.language-bash
					pre.
						ab -n 10000 -c 100 http://127.0.0.1:8100/

						...
						Time taken for tests:   20.689 seconds
						Complete requests:      10000
						...

						# IT WORKS!
				figure

			section(data-bespoke-state='emphatic')
				h2 It is awesome
				h3 Try it!

			section(data-bespoke-state='emphatic')
				h2 But there is a lot more ...

			section#simple
				h2 Simple
				hr
				ul
					li Lightweight
					li Relatively easy to learn
					li Yet flexible

			section
				h2 Static typing
				h3 Yes this is useful!
				hr
				ul.left
					li + Faster - Compiler can go crazy with optimisations
					li + Easier to refactor
					li + Developer efficiency - less tests

			section
				h2 Static typing 
				h3 Without the ceremony
				code.language-clike
					pre.
						# Java, C#
						Circle c = new Circle(15);

						# go
						c := Circle{R: 15}

			section
				h2 Ultra Fast Compilation
				hr
				img(src='images/flash.png')

			section
				h2 Imports
				ul
					li Embeded in the source code
					li No need for gemfile, package.json, etc
				hr
				code.language-clike
					pre.
						import(
							'github.com/sporto/something'
						)

			section
				h2 Object system
				hr
				ul
					li It is all composition
					li Inferred - If it quacks then it is a duck

			section
				h2 Modern Standard Library
				hr
				ul.left
					li + http
					li + crypto
					li + sockets
					li ... all batteries included

			section
				h2 More
				hr
				ul.left
					li + Standardized formatting
					li + Multiple return values
					li + Closures
					li + Functions as first class

			section
				h2 Thanks
				p @sebasporto

		script(src='bower_components/bespoke.js/dist/bespoke.min.js')
		script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
		script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
		script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
		script(src='bower_components/prism/prism.js')
		script(src='scripts/prism.ruby.js')
		script(src='bower_components/prism/components/prism-clike.js')
		script(src='bower_components/prism/components/prism-bash.js')
		script(src='scripts/main.js')
